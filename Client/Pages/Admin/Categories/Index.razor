@page "/admin/categories"




<main class="admin-area-main">
    <SideBar />
    <div class="admin-area-content container-fluid bg-lightgray white">
        <div class="row g-0">
            <div class="col">
                <h1>Categories</h1>
                <br />
                <hr />
                <br />

                @if (databaseCache.Sections == null) {
                    <LoadingDot />
                }
                else {
                    <a href="/admin/categories/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                        <i class="fas fa-plus"></i>Create Category     
                    </a>

                    <button @onclick="() => databaseCache.GetSectionsFromDbCache()" class="btn btn-primary md-f-size-1-5 shadow">
                        <i class="fas fa-sync"></i> Refresh data    
                    </button>

                    <br />
                    <br />
                    <br />

                    @if(databaseCache.Sections.Count < 1) {
                        <h1>No categories found. Please, create one.</h1>
                    }
                    else {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Thumbnail</th>
                                        <th scope="col">Description</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var category in databaseCache.Sections) {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@category.Title</p>
                                            </th>
                                            <td class="w-35">
                                                <img src="/assets//img/other/36421940-placeholder.jpg" class="admin-index-thumbnail-image" alt="Category image">
                                            </td>
                                            <td class="w-15">
                                                <p>@category.Description</p>
                                            </td>
                                            <td class="w-35">
                                                <div class="d-flex flex-column">
                                                    <a href="/admin/categories/update/@category.Id" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Update    
                                                    </a>
                                                    <br />
                                                    <button class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    }

                }
            </div>
        </div>
    </div>
</main>


@implements IDisposable
@code {
    [Inject] DatabaseCache databaseCache { get; set; }

    protected override async Task OnInitializedAsync() {
        databaseCache.OnSectionsDataChanged += StateHasChanged;
        if(databaseCache.Sections == null) {
            await databaseCache.GetSectionsFromDbCache();
        }
    }

    public void Dispose() => databaseCache.OnSectionsDataChanged -= StateHasChanged;     

}
