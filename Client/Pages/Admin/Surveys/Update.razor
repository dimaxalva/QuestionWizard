@page "/admin/surveys/update/{surveyId:int}"
@using System.Net
@using Client.Component.Admin

<main class="admin-area-main">
    <SideBar />

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1 class="mb-4">Update survey</h1>
                @if(_surveyToUpdate == null) {
                    <LoadingDot />
                } else{
                    <EditForm Model="_surveyToUpdate" OnValidSubmit="UpdateSurvey">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-5">
                            <label for="surveyName">Survey Title</label>
                            <InputText @bind-Value="_surveyToUpdate.Title" class="form-control" id="surveyName"></InputText>
                        </div>
                        <div class="form-group mb-5">
                            <label for="surveyDescription">Survey Description</label>
                            <InputText @bind-Value="_surveyToUpdate.Description" class="form-control" id="surveyDescription"></InputText>
                        </div>
                        <div class="form-group mb-5">
                            @if (_surveyToUpdate.Section == null) {
                                <LoadingDot />
                            }
                            else {
                                <div class="form-group wb-5">
                                    <label for="surveyCategory">Category</label>
                                    <InputSelect @bind-Value="@_surveyToUpdate.SectionId" class="form-control" id="surveyCategory">
                                        @foreach (var category in databaseCache.Sections) {
                                            <option value="@category.Id">@category.Title</option>
                                        }
                                    </InputSelect>
                                </div>
                            }
                        </div>
                        <ValidationSummary />

                        <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                            <i class="far fa-save"></i> Save
                        </button>

                        <a href="/admin/surveys" class="btn btn-primary shadow mt-5 md-f-size-1-5">
                            <i class="fas fa-arrow-left"></i> Back to all surveys
                        </a>
                    </EditForm>
                }

                <div class="position-fixed bottom-0 end-5 z-index-5">
                    @if (_updateSuccessful == true) {
                        <Toast IsError="false"
                               ToastTitle="Update successful"
                               ToastBody="Your changes have been saved to the database."
                               ParentMethodToCallOnClickBtnClose="() => _updateSuccessful = false" />
                    }
                    @if (_attempingToUpdateFailed == true) {
                        <Toast IsError="true"
                               ToastTitle="Update failed"
                               ToastBody="Update failed. Please try again and if the issue persists contant to the administrator."
                               ParentMethodToCallOnClickBtnClose="() => _attempingToUpdateFailed = false" />
                    }
                </div>
            </div>
        </div>
    </div>
</main>

@code{
    [Parameter] public int surveyId { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    [Inject] DatabaseCache databaseCache { get; set; }

    private SurveyModel _surveyToUpdate = null;
    private bool _attempingToUpdate = false;
    private bool _attempingToUpdateFailed = false;
    private bool _updateSuccessful = false;

    protected async override Task OnParametersSetAsync() {
        _surveyToUpdate = await databaseCache.GetSurveyById(surveyId);
    }

    private async Task UpdateSurvey() {
        _attempingToUpdate = true;

        HttpResponseMessage response = await httpClient.PutAsJsonAsync<SurveyModel>($"{ApiEndpoints.s_surveys}/{surveyId}", _surveyToUpdate);

        if(response.StatusCode == HttpStatusCode.NoContent) {
            SurveyModel unupdatedSurveyInList = databaseCache.Surveys.Single(survey => survey.Id == surveyId);
            UtilityFunctions.CopyObjectProperties(_surveyToUpdate, unupdatedSurveyInList); 
            _updateSuccessful = true;
        }
        else {
            _attempingToUpdateFailed = true;
        }
        _attempingToUpdate = false;
    }

    private bool _attempingToUplaodImage = false;
    private bool _attempToUploadFailed = false;
    private string _reasonImageUploadFailed = null;

    
}